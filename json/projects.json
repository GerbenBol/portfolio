[
    {
        "id" : "delorean-dash", "name" : "DeLorean Dash", "img" : "deloreandash.png", "imgwidth" : "300", "vid" : "", "gif" : "deloreandash.gif",
        "intro" : "One of the larger projects I've done, DeLorean Dash is a racing game. It is a gravity-defying synthwave-inspired racer, in which you race against your previous best record. With a group consisting of 3 developers and 3 artists, we had to communicate a lot, and work with GIT correctly.",
        "desc" : "How do you make a racing game fun? This was the question we were facing when we started working on what would become 'DeLorean Dash'. We ended up thinking of an idea where the player would have no real sense of what was up and what was down. The car would be able to drive on walls and ceilings, effectively making everything a floor.<br>We also came up with a gravity flip system where the car would have to flip to stay on the track. Players can race against the ghost of their personal best, and keep getting better.<br><br><strong>Project Duration:</strong> 8 weeks<br><strong>Project Type:</strong> Group Project (school)<br><strong>Group Size:</strong> 6 people, 3 developers, 3 artists<br><strong>Tools Used:</strong> Unity with C#, GitHub Desktop, Visual Studio",
        "mywork" : [
            "<strong>Personal Best</strong><br>I made a system that stores the best time driven locally, and when it got through all of the checkpoints. It automatically compares the driven time to the previous best, and stores this, given it is faster than the previous.",
            "<strong>Ghost</strong><br>This system was something I coded, but it was incredibly impractical. It stores the location of the car very often, and the same thing could be achieved in a much more efficient way. It still worked, and shows a ghost of your personal best.",
            "<strong>UI & Menu's</strong><br>I also worked on the UI and menu's. I gave players the option to change their controls, but unfortunately I didn't have enough time to also include sound settings and video settings (e.g. frame rate). Another thing I did was a bit of the UI for when the player is on the track, such as triggers when a gravity switch was coming up, which button to press.",
            "<strong>Camera Movement</strong><br>Though the camera movement was mostly done by someone else, I did contribute a little bit towards the end of the project. A couple of us thought the car didn't feel fast enough, and sometimes the camera would phase through the ground, leading to the player not being able to see where they're driving. I fixed this by tweaking the camera settings.",
            "<strong>Checkpoints</strong><br>I made a system of checkpoints and of course, a finish line. The player would have to drive 3 laps, which ended up being longer than expected (7.5 minutes was the fastest time driven by us). A lap would not be counted if the player had not gone through all checkpoints, so driving back and forth through the finish line wouldn't work. The checkpoints were also used in cases where the player would fall off the track, respawning would set them back at the last checkpoint they went through."
        ]
    },
    {
        "id" : "ball-game", "name" : "Untitled Ball Game", "img" : "", "imgwidth" : "", "vid" : "", "gif" : "untitled_ball_game.gif",
        "intro" : "A small game I made for fun, based off of a game called 'Suika Game'. You drop different kind of objects from ball games (think of footballs and soccer balls) which merge into a larger object when colliding with an identical object.",
        "desc" : "Remaking a game looks easy, and sometimes is. I made this game in a couple of days, and while it isn't bug-free, I'm pretty satisfied with the result.<br>The idea for this game randomly came to me, and I don't really know why, but I immediately felt like making it. So I did, and it was fun. Maybe some day I will find the urge to fix the bugs, but until that this game will stay as it is. If I do come back to fix bugs, I would also like a point system, counting points for merges.<br><br><strong>Project Duration:</strong> 3 days<br><strong>Project Type:</strong> Personal Project<br><strong>Group Size:</strong> 1, just me alone<br><strong>Tools Used:</strong> Unity with C#, Visual Studio",
        "mywork" : [
            "<strong>Object Merging</strong><br>So in this game, when two of the same objects touch each other, they merge. This was probably the hardest feature to code, because it can go wrong in so many ways (and it still does). Sometimes it merges 3 objects instead of 2, or it might consume a lot more and become an incorrect size.",
            "<strong>Line of Death</strong><br>This was another of the features I struggled with for a bit. It is the line that detects objects at the top, and if they're there for too long, the game is over. It took trial and error, but I eventually got it right, though the long detection might allow people to cheat.",
            "<strong>Random Balls</strong><br>The randomised balls wasn't all that hard, but it still had to be done. It is a small script that chooses 1 of 3 balls that are able to be spawned.",
            "<strong>Show Next Object</strong><br>A feature very closely related to the randomised objects, the show next object makes sure the player knows what ball is coming up next."
        ]
    },
    {
        "id" : "twinstick", "name" : "TwinStick", "img" : "", "imgwidth" : "", "vid" : "", "gif" : "twinstick.gif",
        "intro" : "The first game I finished, TwinStick is a top down shooter. It's a game where you control a good robot. You need to find keycards to retrieve the files that are on the top floor. Finding these keycards will allow you to open new doors, but watch out! Your enemies also have robots in this building, surveilling the area, and they are not afraid to kill to defend their secrets.",
        "desc" : "TwinStick is, as the name suggests, a game where you use both joysticks (or WASD/arrow keys + mouse). We only had support for mouse + keyboard, but the concept was the same thing. You would need to find all the keycards in the level before moving on to the next level. In these levels would be enemies patrolling, and they will try to stop you.<br>Finding new guns can allow you to get through the levels faster, and will make the game easier at that. But don't worry, as you make progress in the game, the enemies will also become stronger. With a group that was a little bit dramatic, we still ended up with a pretty good game.<br><br><strong>Project Duration:</strong> 8 weeks<br><strong>Project Type:</strong> Group Project (school)<br><strong>Group Size:</strong> 4 people, 2 developers, 2 artists (of which 1 developer was barely working)<br><strong>Tools Used:</strong> Unity with C#, GitLab, Visual Studio",
        "mywork" : [
            "<strong>Player Movement</strong><br>Though I did not focus primarily on the player movement, I did code the base for it. It was done pretty fast, allowing us to move on fast, and keep our momentum high.",
            "<strong>Enemy Behavior</strong><br>I worked a lot on the different enemy behaviors, because we had multiple. We had 3 different enemies in total. Chaser: would chase the player. Fast but weak. Heavy: large, with a large pool of health. Is quite slow. Guard: standard enemy, not slow not fast. Doesn't deal much damage, and doesn't take much either.",
            "<strong>Keycard System</strong><br>We had a system working where most doors would have their unique keycards to be opened. Some keycards had multiple doors they could open, but this was only in rare occasions, such as the last level.",
            "<strong>Pickups</strong><br>We also had some pickups, such as extra health, armor and ammo. Somehow these took quite a bit of figuring out, because they kept breaking.",
            "<strong>UI & Menu's</strong><br>We had a pretty simple UI, and the menu's were designed by one of our artists. During the game the player could see which weapons they had, and of course how much health, armor and ammo they had left."
        ]
    },
    {
        "id" : "qoute", "name" : "Qoute", "img" : "", "imgwidth" : "", "vid" : "", "gif" : "",
        "intro" : "Have you ever wanted to store quotes from your friends or colleagues in a small database? Well, I've made a Discord bot which makes it super easy to do just that! A super easy system that makes storing a quote, together with its year of origin and quoted easy and quick.",
        "desc" : "This project came a bit out of the blue for me, but in a server with my friends we have a 'quotes' channel. In this channel, as becomes pretty clear from the name, we store quotes of everyone. But at some point the pins got full, so I decided I would make a small Discord bot that worked for this.<br>It was a small project, but nonetheless fun. It was about a week's worth of work, which was at school and at home as well. It's now on a virtual machine at my home, however the machine resets itself a lot and I don't bother checking on it enough.<br>The bot contains 5 functions: 'add-quote', 'get-quote', 'all-quotes', 'update-quote' and 'delete-quote'. Most of them do exactly as they sound, but 'get-quote' has some specific parameters that can define how the bot searches. It can be used with 0 parameters, which will return a random quote. It can be used with an id as parameter, which will return the quote with the given id. It can also be used with a query as parameter, which will return a random quote which contains the query.<br><br><strong>Project Duration:</strong> 1.5 weeks<br><strong>Project Type:</strong> Web Project (partially school)<br><strong>Group Size:</strong> 1, just me alone<br><strong>Tools Used:</strong> Discord Bot System, JavaScript, Visual Studio Code, GitHub",
        "mywork" : [
            "<strong>Store in Database</strong><br>By using 'add-quote' you can fill in a quoted, quote and year of quote to store in the database.",
            "<strong>Get from Database</strong><br>By using 'get-quote' or 'all-quotes' you can get quotes from the database. This can be random or a certain index or even on query.",
            "<strong>Update</strong><br>By using 'update-quote' you can update a quote already in the database.",
            "<strong>Delete</strong><br>By using 'delete-quote' you can permanently delete a quote from the database."
        ]
    },
    {
        "id" : "npc-system", "name" : "NPC System", "img" : "", "imgwidth" : "", "vid" : "", "gif" : "npcsystem.gif",
        "intro" : "A small program that allows one to store their NPC's in a city based system, with a clear view on which characters are in that city. It also has the feature to store a stat block, for if you want your players to be able to fight the NPC, this makes it a lot easier. The system was made specifically for D&D, for DM's, by a DM.",
        "desc" : "This system was an idea that came from me and a friend of mine. We're both Dungeon Masters, and were struggling with remembering our NPC's. Every time we made a new NPC we had troubles: 'where do I write down the name, where they can be found, what their stats are, etcetera, and be able to find it back?'<br>Suddenly I thought of a small system in WinForms, which would store all that information locally. It made so much sense, and I immediately got to work. In a few days, I had this small, easy system that would do what I intended, storing info about NPC's.<br><br><strong>Project Duration:</strong> 1 week<br><strong>Project Type:</strong> Personal Project<br><strong>Group Size:</strong> 1, just me alone<br><strong>Tools Used:</strong> Visual Studio, WinForms, C#",
        "mywork" : [
            "<strong>Create City</strong><br>I made a system that would allow the user to create their own cities. They could see all NPC's they added to that city, by simply clicking the cities' name in the dropdown menu on the main form.",
            "<strong>Create NPC</strong><br>Of course, an NPC system needs the feature to store NPC's. There are quite a few options in this form. NPC name, description, notes, where they can be found and their stat block.",
            "<strong>Make Stat Block</strong><br>I made this app specifically for D&D 5e, so I didn't look at other stats outside of Strength, Dexterity, Constitution, Intelligence, Wisdom and Charisma. It also uses the D&D system, so a 10 has a +0 modifier, while a 4 has a -3 modifier. For NPC's you usually use the standard modifiers, even if it's for one of the skills."
        ]
    },
    {
        "id" : "metronome-labyrinth", "name" : "Metronome Labyrinth", "img" : "metronomelabyrinth.png", "imgwidth" : "500", "vid" : "", "gif" : "metronomemaze.gif",
        "intro" : "A game jam with the theme: Metronome! I thought it would be pretty cool to make a moving labyrinth where the player moves on the beat, like in Crypt of the Necrodancer. It wasn't completely done before time was over, but I was honestly pretty satisfied with how far I got with the limited time.",
        "desc" : "While brainstorming I thought about 'Crypt of the Necrodancer', but how would I make it not a full-on knock-off? But then, suddenly Labyrinth the board game popped in my head, and I thought it would be pretty cool if the labyrinth would change every so often, instead of a player moving it.<br>In the end, I didn't get to completely implement that, it can only push 1 column down. Something that was also not done was my original plan of a randomized labyrinth at the start of the level, as it was too much work. Overall it was a pretty nice project, which I enjoyed.<br><br><strong>Project Duration:</strong> 2 weeks<br><strong>Project Type:</strong> Game Jam (school)<br><strong>Group Size:</strong> 1, just me alone<br><strong>Tools Used:</strong> Unity with C#, GitHub, Visual Studio",
        "mywork" : [
            "<strong>Player Movement</strong><br>One of the things I did differently in this project, was using the new input system. It's pretty different, but after using it for a little, it's easy to get used to it.",
            "<strong>Movement Buffering</strong><br>In this game, the player moves on the rhythm. Of course, it is pretty hard to do this perfectly. So, I made a buffer system. It buffers up to 2 inputs, and executes the first on the next frame.",
            "<strong>Metronome Sound</strong><br>This was pretty easy to make, I only had to find some audio files that I liked enough to use. Then, after writing a small script that implements that and getting some UI to work with the ticks. The UI unfortunately doesn't work as I intended it to do.",
            "<strong>Labyrinth Move</strong><br>This was one of the most important features, and I unfortuantely didn't have enough time/skills to make it work properly. I wanted a randomised maze at the start, and the maze would move to the left, right, up and down. Unfortunately, I only got the move down to work. I did spend a bit of time on the randomised maze, until I found out that my perfectionism got in the way of getting it good enough, as it would take me quite some time to get it the way I wanted."
        ]
    },
    {
        "id" : "small-feesh", "name" : "Small Feesh, Big World.", "img" : "", "imgwidth" : "", "vid" : "", "gif" : "small-feesh.gif",
        "intro" : "A short platformer where you play a small fish, in a big world, or well, sea rather. Make your way through dangerous waters, and watch out for the remains of human presence or other fishes. Because remember, there is always a bigger fish.",
        "desc" : "In this project, we made a short platformer with 2 people. My teammate focused mostly on the enemy, the shaders and the other visuals, so I had to make most of the rest of the game. I made movement, dashing, checkpoints, death handling and did the level design. In the end, I'm pretty happy with how the game turned out, though there are still a couple problems, such as the player being stuck on the ground because it collided with the tilemap.<br><br><strong>Project Duration:</strong> 3 weeks<br><strong>Project Type:</strong> Group Project (school)<br><strong>Group Size:</strong> 2 people, 2 developers<br><strong>Tools Used:</strong> Unity with C#, GitHub, Visual Studio, paint.net",
        "mywork" : [
            "<strong>Player Movement</strong><br>I made the movement, using Unity's old input system. I made a system that checks for the necessary inputs, and stores them. This way I won't have to ask for the inputs multiple times. It's a simple system, and doesn't take much performance.",
            "<strong>Dashing</strong><br>When I started working on the dash mechanic, I had never made a dash before. This was the first time, and I found out how annoyingly difficult it is. In the end, it did work, and the player was able to dash diagonally, vertically and horizontally.",
            "<strong>Checkpoints</strong><br>The checkpoints, invisible of course, check when the player enters a trigger. The system makes sure the player can respawn at a checkpoint that is close to them, so they won't have to do the whole level again, as that can be quite frustrating.",
            "<strong>Level Design</strong><br>One of the last things I did was the designing of the levels. I created the sketches in Paint, and then remade them into actual levels. I did this to ensure not having to start over if I didn't like it. Seeing the whole level at once also helped with making sure the levels didn't feel small or big."
        ]
    },
    {
        "id" : "unboxr", "name" : "Unboxr", "img" : "unboxr.png", "imgwidth" : "", "vid" : "", "gif" : "unboxr.gif",
        "intro" : "Unboxr is a game where you organize boxes by putting them in the correct spot. It is a short puzzle game I created all on my own.",
        "desc" : "In this project I put together a contract with the teachers, with a strict deadline which I had to follow closely. My grade was dependent on how well I made the described game. So, I had to make exactly what I had written down in the contract, not just what I wanted to make and add.<br><br><strong>Project Duration:</strong> 4 weeks<br><strong>Project Type:</strong> School Project<br><strong>Group Size:</strong> 1, just me alone<br><strong>Tools Used:</strong> Unity with C#, Git using Fork, Visual Studio, Blender",
        "mywork" : [
            "<strong>Player Movement</strong><br>Making the movement using the new input system wasn't as easy as using the old system. I ran into a couple things, such as a input listener not listening, which I found out is normal. It took me a while to fix this problem, and I did lose quite a bit on that. The player can still make themselves fly by taking a box and holding it under themselves, making the body float. Making the camera movement was a bit weird as well, as the new input system uses deltas.",
            "<strong>Interacting with Objects</strong><br>In this project, I also challenged myself. I needed to make doors and boxes, and it would be easy for me if these interactions were on different keys. But, as a player, I want to be able to press 1 button for all interactions. Thus, I decided to implement an interface called IInteractable, which had the Interact function. In the door objects, it would check if the door was open, and open it if it was. In the boxes it would check if we were already holding the object or if we were trying to drop the object.",
            "<strong>Level/ Puzzle Design</strong><br>I designed the levels and puzzles myself. There were 4 in the entire game, which isn't a lot, and they're not the best nor hardest levels, but they were difficult enough. I playtested with colleagues who didn't play games that often. Some of them had more trouble solving the puzzles than others, so I decided to keep the puzzels as they were, as it was absolutely possible to raise the difficulty as the game went on (if it was ever going to be a full game).",
            "<strong>Game Management</strong><br>I also made the game management. It spawned the next levels in when the current one was completed, which made it so the game wouldn't take forever to load when starting. "
        ]
    },
    {
        "id" : "upg", "name" : "", "img" : "", "imgwidth" : "", "vid" : "", "gif" : "",
        "intro" : "",
        "desc" : "<br><br><strong>Project Duration:</strong> <br><strong>Project Type:</strong> <br><strong>Group Size:</strong> <br><strong>Tools Used:</strong> ",
        "mywork" : [
            "<strong></strong><br>"
        ]
    },
    {
        "id" : "", "name" : "", "img" : "", "imgwidth" : "", "vid" : "", "gif" : "",
        "intro" : "",
        "desc" : "<br><br><strong>Project Duration:</strong> <br><strong>Project Type:</strong> <br><strong>Group Size:</strong> <br><strong>Tools Used:</strong> ",
        "mywork" : [
            "<strong></strong><br>"
        ]
    }
]
